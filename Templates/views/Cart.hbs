<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Your Cart</title>
  <link rel="stylesheet" href="/css/Cart.css" />
  <link rel="stylesheet" href="/css/bootstrap.min.css">

  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"
    integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA=="
    crossorigin="anonymous" referrerpolicy="no-referrer" />
</head>

<body>
  {{>Navbar}}
  <div class="cart-style container">
    <div class="container-fluid cart">
      <div class="path">
        <h5><a href="/{{link}}">Home </a>/ Your Cart</h5>
      </div>
      <h1 class="heading">Cart</h1>
      {{#if cartData}}
      <div class="cart-items">
        <table class="table">
          <thead>
            <tr>
              <th>Cart Items</th>
              <th>Price</th>
              <th>Quantity</th>
              <th>SubTotal</th>
            </tr>
          </thead>
          <tbody>
            {{#each cartData}}
            <tr>
              <td class="item">
                <figure><img src="{{this.productImage}}" alt="{{this.productName}}" srcset="" />
                </figure>
                <p>{{this.productName}}</p>
              </td>
              <td class=" price">₹ {{this.productPrice}}
              </td>
              <td class="quant">
                <div class="q">
                  <button class="decrement btn" data-name="{{this.productName}}">-</button>
                  <span class="quantity">{{this.quantity}}</span>
                  <button class="increment btn" data-name="{{this.productName}}">+</button>
                  <button class="delete-btn btn" data-name="{{this.productName}}"><i
                      class="fa-regular fa-trash-can"></i></button>
                </div>
              </td>
              <td class="subtotal">₹ <span class="subtotal-value">{{multiply this.quantity this.productPrice}}</span>
              </td>
            </tr>
            {{/each}}
          </tbody>
        </table>
      </div>
      {{else}}
      <p>Your cart is empty.</p>
      {{/if}}
    </div>
    <div class="container-fluid row">
      <div class="col-1 col-sm-1 col-md-10 col-lg-10"></div>
      <div class="checkout col-11 col-sm-11 col-md-2 col-lg-2">
        <div class="subtotal">
          <p><span class="label"> SUBTOTAL:</span><span class="money">₹ 0.00</span></p>
        </div>
        <div class="delivery">
          <p><span class="label"> DELIVERY:</span><span class="money">₹ 0.00</span></p>
        </div>
        <div class="line"></div>
        <div class="grandtotal">
          <p><span class="label"> GRAND TOTAL:</span><span class="money">₹ 0.00</span></p>
        </div>
        <div class="checkoutbtn center">
          <Button class="btn checkout">PROCEED TO CHECKOUT</Button>
        </div>
      </div>
    </div>
  </div>
  {{>footer}}
  <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
  <script>
    $(document).ready(function () {
      const link = "{{link}}";

      // Function to update cart UI based on cart data availability
      function updateCartUI() {
        if ($('.cart-items tbody tr').length === 0) {
          $('.checkout').addClass('disabled'); // Add disabled class to make checkout button unclickable
          $('.checkoutbtn .btn').prop('disabled', true); // Disable checkout button
          $('.cart-items').html('<p>Your cart is empty.</p>'); // Show empty cart message
        } else {
          $('.checkout').removeClass('disabled'); // Remove disabled class
          $('.checkoutbtn .btn').prop('disabled', false); // Enable checkout button
        }
      }

      // Call updateCartUI() initially to update cart UI when the page loads
      updateCartUI();



      $(".checkout").on("click", function () {
        // Check if the cart is not empty
        if ($('.cart-items tbody tr').length > 0) {
          window.location.href = `/${link}/checkout`;
        }
      });


      $(".increment").on("click", function () {
        var productName = $(this).data("name");
        var quantityElement = $(this).closest('.quant').find(".quantity");
        var currentQuantity = parseInt(quantityElement.text());
        var newQuantity = currentQuantity + 1;

        // Send AJAX request to update quantity in session
        $.ajax({
          url: `/${link}/updateCartItem`,
          method: 'POST',
          data: { productName: productName, newQuantity: newQuantity },
          success: function (response) {
            // Update quantity in HTML
            quantityElement.text(newQuantity);
            updateSubtotal(productName); // Update subtotal after changing quantity
            updateTotals();

          },
          error: function (xhr, status, error) {
            console.error('Error updating quantity:', error);
            // Handle error
          }
        });
      });

      $(".decrement").on("click", function () {
        var productName = $(this).data("name");
        var quantityElement = $(this).closest('.quant').find(".quantity");

        var currentQuantity = parseInt(quantityElement.text());
        if (currentQuantity > 1) {
          var newQuantity = currentQuantity - 1;

          // Send AJAX request to update quantity in session
          $.ajax({
            url: `/${link}/updateCartItem`,
            method: 'POST',
            data: { productName: productName, newQuantity: newQuantity },
            success: function (response) {
              quantityElement.text(newQuantity);
              updateSubtotal(productName); // Update subtotal after changing quantity
              updateTotals();
            },
            error: function (xhr, status, error) {
              console.error('Error updating quantity:', error);
            }
          });
        }
      });

      // Delete button click event
      $(".delete-btn").on("click", function () {
        var productName = $(this).data("name");
        var deleteButton = $(this); // Store reference to the delete button

        // Send AJAX request to delete item from session
        $.ajax({
          url: `/${link}/deleteCartItem`,
          method: 'POST',
          data: { productName: productName },
          success: function (response) {
            // Remove the row from the HTML using stored reference
            deleteButton.closest("tr").remove();

            updateTotals();
            updateCartUI();
          },
          error: function (xhr, status, error) {
            console.error('Error deleting item:', error);
            // Handle error
          }
        });
      });

      // Function to update subtotal for a specific product
      function updateSubtotal(productName) {
        var row = $("tr").filter(function () {
          return $(this).find(".item span").text() === productName;
        });
        var quantity = parseInt(row.find(".quantity").text());
        var price = parseFloat(row.find(".price").text().substring(2));
        var subtotal = quantity * price;
        row.find(".subtotal-value").text(subtotal.toFixed(2)); // Update subtotal value
      }

      // Function to update subtotal, delivery, and grand total
      function updateTotals() {
        var subtotal = 0;

        // Loop through each row in the table
        $("tbody tr").each(function () {
          var quantity = parseInt($(this).find(".quantity").text());
          var price = parseFloat($(this).find(".price").text().substring(2));
          subtotal += quantity * price;
        });
        function updateItemCount() {
          var itemCount = $('.cart-items tbody tr').length;
          var cartBadge = $('.cart-badge');
          if (itemCount > 0) {
            cartBadge.text(itemCount).show(); // Show badge and update count
          } else {
            cartBadge.hide(); // Hide badge if count is 0
          }
        }

        // Call updateItemCount() initially to update item count when the page loads
        updateItemCount();


        // Update subtotal in HTML
        $(".subtotal .money").text("₹ " + subtotal.toFixed(2));

        // Assuming delivery charge is 0 for now
        var delivery = 0;
        $(".delivery .money").text("₹ " + delivery.toFixed(2));

        // Calculate grand total
        var grandTotal = subtotal + delivery;

        // Update grand total in HTML
        $(".grandtotal .money").text("₹ " + grandTotal.toFixed(2));
      }
      $(".increment, .decrement, .delete-btn").on("click", function () {
        updateItemCount();
        updateTotals();
      });

      // Call updateTotals() initially to update totals when the page loads
      updateTotals();
    });
  </script>
</body>

</html>